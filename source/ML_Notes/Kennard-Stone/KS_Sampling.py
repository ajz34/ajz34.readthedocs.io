import numpy as np
import ctypes
import os
import os.path as path


prog_dir = path.dirname(path.abspath(__file__))
cpp_name = "ks_cpp"

if not os.path.isfile(prog_dir + "/" + cpp_name + ".so"):
    current_dir = os.path.abspath(".")
    os.chdir(path.dirname(path.abspath(__file__)))
    os.system("gcc -fopenmp -O3 -shared -o " + cpp_name + ".so " + cpp_name + ".c")
    os.chdir(current_dir)
ks_cpp = np.ctypeslib.load_library(cpp_name + ".so", prog_dir)


def ks_sampling_core_cpp(dist, seed=None, n_result=None):
    """
    ks_sampling_core_cpp(dist, seed=None, x_sel=None)
    
    KS Sampling Program
    
    Parameters
    ----------
    
    dist: np.ndarray
        shape: (n_sample, n_sample)
        Distances of samples, need to be generated by user.
        
    seed: np.ndarray or list or None, optional
        shape: (n_seed, )
        Initial selected seed.
        If set as `None`, the C program will find the two samples
        which have largest distance as seed.
        
    n_result: int or None, optional
        Number of samples that should be selected.
        If set as `None`, `n_sample` will be used instead.
    """
    assert(dist.shape[0] == dist.shape[1])
    n_sample = dist.shape[0]
    if n_result is None:
        n_result = n_sample
    n_seed = None
    if seed is None:
        seed = np.zeros(2, dtype=np.uintp)
        n_seed = 0
    else:
        seed = np.asarray(seed, dtype=np.uintp)
        n_seed = seed.shape[0]
    vdist = np.zeros(n_result, dtype=np.float32)
    result = np.zeros(n_result, dtype=np.uintp)
    ks_cpp.kennard_stone(
        dist.astype(np.float32).ctypes.data_as(ctypes.c_void_p),
        seed.ctypes.data_as(ctypes.c_void_p),
        result.ctypes.data_as(ctypes.c_void_p),
        vdist.ctypes.data_as(ctypes.c_void_p),
        ctypes.c_size_t(n_sample),
        ctypes.c_size_t(n_seed),
        ctypes.c_size_t(n_result),
    )
    return result.astype(int), vdist.astype(float)
